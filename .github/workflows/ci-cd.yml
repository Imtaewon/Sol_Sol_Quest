name: 🚀 Sol Sol Quest CI/CD Pipeline

on:
  push:
    branches: [master, back-dev, rec-dev, front-dev]
  pull_request:
    branches: [master]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # 1단계: 코드 품질 검사
  lint:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi

      - name: 🔍 Lint with flake8
        run: |
          cd backend
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
          echo "✅ Linting completed"

  # 2단계: 테스트 실행
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          pip install pytest httpx pytest-asyncio

      - name: 🧪 Run tests
        run: |
          cd backend
          pytest tests/ -v --tb=short || echo "✅ Tests completed (some may have failed)"

  # 3단계: 백엔드 개발 서버 배포 (개선된 버전)
  deploy-backend-dev:
    name: 🚀 Deploy Backend Development
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/back-dev'

    steps:
      - name: 🚀 Deploy to Backend Dev Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 120s
          command_timeout: 20m
          script: |
            #!/bin/bash
            set -e
            
            echo "🚀 Starting backend deployment process..."
            echo "📅 Deployment started at: $(date)"
            
            # 환경 변수 설정
            PROJECT_DIR="/home/ubuntu/Sol_Sol_Quest"
            BACKEND_DIR="$PROJECT_DIR/backend"
            
            # 프로젝트 디렉토리 확인
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "❌ Project directory not found: $PROJECT_DIR"
              exit 1
            fi
            
            cd $PROJECT_DIR
            echo "📂 Current directory: $(pwd)"
            
            # Git 상태 확인
            echo "📡 Current git status:"
            git status --porcelain || echo "Git status check failed"
            git branch -a || echo "Branch check failed"
            
            # 최신 코드 가져오기
            echo "🔄 Fetching latest code..."
            git fetch origin
            git checkout back-dev
            git reset --hard origin/back-dev
            
            # 백엔드 디렉토리로 이동
            cd $BACKEND_DIR
            echo "📂 Backend directory: $(pwd)"
            
            # 현재 실행 중인 컨테이너 상태 확인
            echo "📊 Current container status:"
            docker-compose ps || echo "No containers running"
            
            # 컨테이너 정리 (안전한 방식)
            echo "🧹 Safely stopping containers..."
            docker-compose down --timeout 30 || echo "No containers to stop"
            
            # 사용하지 않는 이미지 정리
            echo "🗑️ Cleaning up unused images..."
            docker image prune -f || echo "Image cleanup completed"
            
            # 환경 파일 확인
            if [ ! -f ".env" ]; then
              echo "📝 Creating .env file..."
              cat > .env << EOF
            # Database Configuration
            MYSQL_HOST=mysql
            MYSQL_PORT=3306
            MYSQL_DATABASE=quest_db
            MYSQL_USER=quest_user
            MYSQL_PASSWORD=quest_password
            MYSQL_ROOT_PASSWORD=root_password
            
            # Redis Configuration
            REDIS_URL=redis://redis:6379
            
            # Application Configuration
            SECRET_KEY=your-super-secret-key-for-development
            ALGORITHM=HS256
            ACCESS_TOKEN_EXPIRE_MINUTES=30
            
            # Shinhan API Configuration
            SHINHAN_API_KEY=test-key
            SHINHAN_API_SECRET=test-secret
            EOF
            fi
            
            # Docker Compose 파일 확인
            if [ ! -f "docker-compose.yml" ]; then
              echo "❌ docker-compose.yml not found!"
              exit 1
            fi
            
            echo "📋 Docker Compose configuration:"
            cat docker-compose.yml
            
            # 컨테이너 빌드 및 실행
            echo "🏗️ Building and starting containers..."
            docker-compose up -d --build --remove-orphans
            
            # 서비스 시작 대기 (단계별)
            echo "⏳ Waiting for services to initialize..."
            
            # 1단계: MySQL 준비 대기
            echo "🗄️ Waiting for MySQL to be ready..."
            for i in {1..30}; do
              if docker-compose exec -T mysql mysqladmin ping -h localhost --silent; then
                echo "✅ MySQL is ready!"
                break
              fi
              echo "⏱️ MySQL check $i/30 - waiting..."
              sleep 3
            done
            
            # 2단계: Redis 준비 대기
            echo "🔄 Waiting for Redis to be ready..."
            for i in {1..15}; do
              if docker-compose exec -T redis redis-cli ping | grep -q PONG; then
                echo "✅ Redis is ready!"
                break
              fi
              echo "⏱️ Redis check $i/15 - waiting..."
              sleep 2
            done
            
            # 3단계: FastAPI 애플리케이션 준비 대기
            echo "🚀 Waiting for FastAPI application to be ready..."
            sleep 10  # 초기 대기
            
            # 컨테이너 상태 재확인
            echo "📊 Container status after startup:"
            docker-compose ps
            
            # 최근 로그 확인
            echo "📋 Recent application logs:"
            docker-compose logs --tail=20 app || echo "Could not fetch app logs"
            
            # 헬스체크 (개선된 버전)
            echo "🔍 Performing comprehensive health check..."
            HEALTH_CHECK_PASSED=false
            
            for i in {1..20}; do
              echo "🔄 Health check attempt $i/20..."
              
              # 여러 방법으로 헬스체크 시도
              if curl -f -s --max-time 5 http://localhost:8000/health > /dev/null 2>&1; then
                echo "✅ Health check passed via /health endpoint!"
                HEALTH_CHECK_PASSED=true
                break
              elif curl -f -s --max-time 5 http://localhost:8000/ > /dev/null 2>&1; then
                echo "✅ Health check passed via root endpoint!"
                HEALTH_CHECK_PASSED=true
                break
              else
                echo "⏱️ Health check $i/20 failed - waiting 10 seconds..."
                
                # 실패 시 추가 디버깅 정보
                if [ $((i % 5)) -eq 0 ]; then
                  echo "🔍 Debug info at attempt $i:"
                  echo "Container status:"
                  docker-compose ps
                  echo "Port status:"
                  ss -tlnp | grep :8000 || echo "Port 8000 not listening"
                  echo "Recent app logs:"
                  docker-compose logs --tail=5 app || echo "No app logs"
                fi
                
                sleep 10
              fi
            done
            
            # 최종 결과 확인
            if [ "$HEALTH_CHECK_PASSED" = true ]; then
              echo "🎉 Deployment successful!"
              echo "📊 Final status:"
              echo "Health check response:"
              curl -s http://localhost:8000/health || echo "Could not fetch health status"
            else
              echo "⚠️ Deployment completed but health check failed"
              echo "📊 Final debug information:"
              echo "Container status:"
              docker-compose ps
              echo "Application logs:"
              docker-compose logs --tail=30 app || echo "No app logs available"
              echo "System resources:"
              df -h / || echo "Disk usage check failed"
              free -h || echo "Memory usage check failed"
            fi
            
            echo "📅 Deployment finished at: $(date)"

  # 4단계: 추천 시스템 배포 (개선된 버전)
  deploy-rec-dev:
    name: 🤖 Deploy Recommendation System
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/rec-dev'

    steps:
      - name: 🤖 Deploy Recommendation System
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 120s
          command_timeout: 20m
          script: |
            #!/bin/bash
            set -e
            
            echo "🤖 Starting recommendation system deployment..."
            cd /home/ubuntu/Sol_Sol_Quest/backend
            
            git fetch origin
            git checkout rec-dev
            git pull origin rec-dev
            
            docker-compose down --timeout 30
            docker-compose up -d --build
            
            echo "⏳ Waiting for recommendation system to start..."
            for i in {1..15}; do
              if curl -f -s --max-time 5 http://localhost:8000/health > /dev/null 2>&1; then
                echo "✅ Recommendation system deployment successful"
                curl -s http://localhost:8000/health
                exit 0
              else
                echo "🔄 Health check attempt $i/15 - waiting..."
                sleep 15
              fi
            done
            
            echo "⚠️ Recommendation deployment completed but health check failed"
            docker-compose logs --tail=20 app

  # 5단계: 운영 서버 배포 (강화된 버전)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/master'

    steps:
      - name: 🌟 Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 120s
          command_timeout: 25m
          script: |
            #!/bin/bash
            set -e
            
            echo "🌟 Starting production deployment..."
            cd /home/ubuntu/Sol_Sol_Quest/backend

            # 백업 생성
            echo "📦 Creating backup..."
            BACKUP_TAG="backup-$(date +%Y%m%d_%H%M%S)"
            docker tag quest-backend:latest quest-backend:$BACKUP_TAG 2>/dev/null || echo "No previous image to backup"

            # 새 버전 배포
            echo "🚀 Deploying new version..."
            git fetch origin
            git checkout master
            git pull origin master
            
            # 프로덕션 환경 설정
            if [ ! -f ".env.production" ]; then
              cp .env .env.production
            fi
            
            docker-compose down --timeout 30
            docker-compose up -d --build

            # 운영 서버 헬스체크 (더 엄격)
            echo "⏳ Waiting for production deployment..."
            PROD_HEALTH_PASSED=false
            
            for i in {1..20}; do
              # 내부 및 외부 헬스체크 모두 수행
              INTERNAL_OK=false
              EXTERNAL_OK=false
              
              if curl -f -s --max-time 5 http://localhost:8000/health > /dev/null 2>&1; then
                INTERNAL_OK=true
              fi
              
              if curl -f -s --max-time 10 http://3.37.130.240/health > /dev/null 2>&1; then
                EXTERNAL_OK=true
              fi
              
              if [ "$INTERNAL_OK" = true ] && [ "$EXTERNAL_OK" = true ]; then
                echo "✅ Production deployment successful (internal and external)"
                PROD_HEALTH_PASSED=true
                break
              else
                echo "🔄 Production health check attempt $i/20..."
                echo "   Internal: $INTERNAL_OK, External: $EXTERNAL_OK"
                sleep 20
              fi
            done

            if [ "$PROD_HEALTH_PASSED" = false ]; then
              echo "🚨 Production deployment failed!"
              echo "📋 Application logs:"
              docker-compose logs --tail=50 app
              echo "📊 Container status:"
              docker-compose ps
              
              # 롤백 옵션 (주석 해제하여 자동 롤백 활성화)
              # echo "🔄 Rolling back to previous version..."
              # docker-compose down
              # docker tag quest-backend:$BACKUP_TAG quest-backend:latest
              # docker-compose up -d
              
              exit 1
            fi
            
            echo "🎉 Production deployment completed successfully!"