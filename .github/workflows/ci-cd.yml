name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [master, back-dev, rec-dev, front-dev]
  pull_request:
    branches: [master]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # 1단계: 코드 품질 검사
  lint:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🔍 Lint with flake8
        run: |
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || true

  # 2단계: 테스트 실행
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: 🧪 Run basic tests
        run: |
          pytest tests/ -v || echo "No tests found, continuing..."
          working-directory: ./backend  # ← 추가

  # 3단계: 백엔드 개발 서버 배포
  deploy-backend-dev:
    name: 🚀 Deploy Backend Development
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/back-dev'

    steps:
      - name: 🚀 Deploy to Backend Dev Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/Sol_Sol_Quest/backend
            git fetch origin
            git checkout back-dev
            git pull origin back-dev
            docker-compose down
            docker-compose up -d --build

            # 개선된 헬스체크
            echo "⏳ Waiting for backend service to start..."
            for i in {1..6}; do
              if curl -f http://localhost:8000 || curl -f http://localhost:8000/health; then
                echo "✅ Backend development deployment successful"
                exit 0
              else
                echo "Health check attempt $i/6 failed, waiting..."
                sleep 10
              fi
            done
            echo "⚠️ Backend deployment completed but health check failed"

  # 4단계: 추천 시스템 배포
  deploy-rec-dev:
    name: 🤖 Deploy Recommendation System
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/rec-dev'

    steps:
      - name: 🤖 Deploy Recommendation System
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/Sol_Sol_Quest/backend
            git fetch origin
            git checkout rec-dev
            git pull origin rec-dev
            docker-compose down
            docker-compose up -d --build

            # 추천 시스템 헬스체크
            echo "⏳ Waiting for recommendation system to start..."
            for i in {1..6}; do
              if curl -f http://localhost:8000; then
                echo "✅ Recommendation system deployment successful"
                exit 0
              else
                echo "Health check attempt $i/6 failed, waiting..."
                sleep 10
              fi
            done
            echo "⚠️ Recommendation deployment completed but health check failed"

  # 5단계: 운영 서버 배포
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/master'

    steps:
      - name: 🌟 Deploy to Production Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/Sol_Sol_Quest/backend

            # 백업 생성
            echo "📦 Creating backup..."
            docker tag backend-app:latest backend-app:backup-$(date +%Y%m%d_%H%M%S) 2>/dev/null || echo "No previous image to backup"

            # 새 버전 배포
            echo "🚀 Deploying new version..."
            git fetch origin
            git checkout master
            git pull origin master
            docker-compose down
            docker-compose up -d --build

            # 운영 서버 헬스체크 (더 엄격)
            echo "⏳ Waiting for production deployment..."
            for i in {1..10}; do
              if curl -f http://localhost:8000 && curl -f http://3.37.130.240; then
                echo "✅ Production deployment successful"
                exit 0
              else
                echo "Production health check attempt $i/10 failed, waiting..."
                sleep 15
              fi
            done

            # 실패 시 롤백 (선택사항)
            echo "🚨 Production deployment failed, consider rollback"
            exit 1
